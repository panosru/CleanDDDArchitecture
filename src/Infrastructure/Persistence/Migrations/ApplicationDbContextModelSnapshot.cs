// <auto-generated />

namespace CleanDDDArchitecture.Infrastructure.Persistence.Migrations
{
    using System;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

    [DbContext(typeof(ApplicationDbContext))]
    internal class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CleanDDDArchitecture.Domain.Entities.TodoItem", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("Deleted")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uuid");

                b.Property<bool>("Done")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("LastModified")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid?>("LastModifiedBy")
                    .HasColumnType("uuid");

                b.Property<int>("ListId")
                    .HasColumnType("integer");

                b.Property<string>("Note")
                    .HasColumnType("text");

                b.Property<int>("Priority")
                    .HasColumnType("integer");

                b.Property<DateTime?>("Reminder")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.HasIndex("ListId");

                b.ToTable("TodoItems");
            });

            modelBuilder.Entity("CleanDDDArchitecture.Domain.Entities.TodoList", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Colour")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("Deleted")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid?>("DeletedBy")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("LastModified")
                    .HasColumnType("timestamp without time zone");

                b.Property<Guid?>("LastModifiedBy")
                    .HasColumnType("uuid");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.ToTable("TodoLists");
            });

            modelBuilder.Entity("CleanDDDArchitecture.Infrastructure.Identity.ApplicationRole", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("CleanDDDArchitecture.Infrastructure.Identity.ApplicationUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
            {
                b.Property<string>("UserCode")
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<string>("ClientId")
                    .IsRequired()
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("character varying(50000)")
                    .HasMaxLength(50000);

                b.Property<string>("DeviceCode")
                    .IsRequired()
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<DateTime?>("Expiration")
                    .IsRequired()
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("SubjectId")
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.HasKey("UserCode");

                b.HasIndex("DeviceCode")
                    .IsUnique();

                b.HasIndex("Expiration");

                b.ToTable("DeviceCodes");
            });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
            {
                b.Property<string>("Key")
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<string>("ClientId")
                    .IsRequired()
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("character varying(50000)")
                    .HasMaxLength(50000);

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("SubjectId")
                    .HasColumnType("character varying(200)")
                    .HasMaxLength(200);

                b.Property<string>("Type")
                    .IsRequired()
                    .HasColumnType("character varying(50)")
                    .HasMaxLength(50);

                b.HasKey("Key");

                b.HasIndex("Expiration");

                b.HasIndex("SubjectId", "ClientId", "Type");

                b.ToTable("PersistedGrants");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("character varying(128)")
                    .HasMaxLength(128);

                b.Property<string>("ProviderKey")
                    .HasColumnType("character varying(128)")
                    .HasMaxLength(128);

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("LoginProvider")
                    .HasColumnType("character varying(128)")
                    .HasMaxLength(128);

                b.Property<string>("Name")
                    .HasColumnType("character varying(128)")
                    .HasMaxLength(128);

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("CleanDDDArchitecture.Domain.Entities.TodoItem", b =>
            {
                b.HasOne("CleanDDDArchitecture.Domain.Entities.TodoList", "List")
                    .WithMany("Items")
                    .HasForeignKey("ListId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
            {
                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.HasOne("CleanDDDArchitecture.Infrastructure.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}