info:
  title: Rest API
  description: Swagger with API version, <a href='/swagger.yaml'>download swagger.yaml</a>
  version: 1.1
  termsOfService: &o0
    absolutePath: /termsofservice
    absoluteUri: *o0
    localPath: /termsofservice
    authority: company.com
    hostNameType: Dns
    isDefaultPort: true
    pathAndQuery: /termsofservice
    segments:
    - /
    - termsofservice
    host: company.com
    port: 443
    query: ''
    fragment: ''
    scheme: https
    originalString: *o0
    dnsSafeHost: company.com
    idnHost: company.com
    isAbsoluteUri: true
    userInfo: ''
  contact:
    name: John Doe
    url: &o1
      absolutePath: /helpdesk
      absoluteUri: *o1
      localPath: /helpdesk
      authority: support.company.com
      hostNameType: Dns
      isDefaultPort: true
      pathAndQuery: /helpdesk
      segments:
      - /
      - helpdesk
      host: support.company.com
      port: 443
      query: ''
      fragment: ''
      scheme: https
      originalString: *o1
      dnsSafeHost: support.company.com
      idnHost: support.company.com
      isAbsoluteUri: true
      userInfo: ''
    email: j.doe@email.com
  license:
    name: MIT
    url:
      absolutePath: /licenses/MIT
      absoluteUri: https://opensource.org/licenses/MIT
      localPath: /licenses/MIT
      authority: opensource.org
      hostNameType: Dns
      isDefaultPort: true
      pathAndQuery: /licenses/MIT
      segments:
      - /
      - licenses/
      - MIT
      host: opensource.org
      port: 443
      query: ''
      fragment: ''
      scheme: https
      originalString: https://opensource.org/licenses/MIT
      dnsSafeHost: opensource.org
      idnHost: opensource.org
      isAbsoluteUri: true
      userInfo: ''
servers: []
paths:
  /api/account/confirm/{Token}/{Email}:
    operations:
      Get:
        tags:
        - name: Account
        summary: Confirm user email with token taken from authentication endpoint
        parameters:
        - name: Token
          in: Path
          required: true
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        - name: Email
          in: Path
          required: true
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        - name: x-api-version
          in: Header
          description: The requested API version
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        responses:
          202:
            description: Email confirmed successfully.
            headers: {}
            content: {}
            links: {}
          401:
            description: Invalid email token.
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
          200:
            description: Account confirmation.
            headers: {}
            content: {}
            links: {}
          400:
            description: Bad request.
            headers: {}
            content: {}
            links: {}
          404:
            description: Not Found.
            headers: {}
            content: {}
            links: {}
        callbacks: {}
        security: []
        servers: []
    servers: []
    parameters: []
  /api/account/authenticate:
    operations:
      Post:
        tags:
        - name: Account
        summary: Authenticate a user and a bearer or an email confirmation token
        parameters:
        - name: x-api-version
          in: Header
          description: The requested API version
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        requestBody:
          description: ''
          content:
            application/json:
              schema: &o2
                allOf: []
                oneOf: []
                anyOf: []
                required: []
                properties: {}
                additionalPropertiesAllowed: true
                enum: []
                reference:
                  type: Schema
                  id: AuthenticateDto
                  isLocal: true
                  referenceV3: '#/components/schemas/AuthenticateDto'
                  referenceV2: '#/definitions/AuthenticateDto'
              examples: {}
              encoding: {}
            text/json:
              schema: *o2
              examples: {}
              encoding: {}
            application/*+json:
              schema: *o2
              examples: {}
              encoding: {}
        responses:
          202:
            description: Success
            headers: {}
            content: {}
            links: {}
          401:
            description: Invalid credentials or mail not confirmed.
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
          200:
            description: Email confirmation required.
            headers: {}
            content: {}
            links: {}
          201:
            description: Login successful.
            headers: {}
            content: {}
            links: {}
          400:
            description: Bad request.
            headers: {}
            content: {}
            links: {}
          404:
            description: Not found.
            headers: {}
            content: {}
            links: {}
        callbacks: {}
        security: []
        servers: []
    servers: []
    parameters: []
  /metal:
    operations:
      Get:
        tags:
        - name: Metal
        summary: Metal info
        parameters:
        - name: x-api-version
          in: Header
          description: The requested API version
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        responses:
          default:
            description: Error
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
          200:
            description: Metal data.
            headers: {}
            content: {}
            links: {}
          404:
            description: Not Found.
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
        callbacks: {}
        security: []
        servers: []
    servers: []
    parameters: []
  /api/weather:
    operations:
      Get:
        tags:
        - name: Weather
        summary: Performs weather forecast
        parameters:
        - name: x-api-version
          in: Header
          description: The requested API version
          schema:
            type: string
            allOf: []
            oneOf: []
            anyOf: []
            required: []
            properties: {}
            additionalPropertiesAllowed: true
            enum: []
          examples: {}
          content: {}
        responses:
          default:
            description: Error
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
          200:
            description: Todo list already exists
            headers: {}
            content: {}
            links: {}
          404:
            description: Not found.
            headers: {}
            content:
              text/plain:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              application/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
              text/json:
                schema:
                  allOf: []
                  oneOf: []
                  anyOf: []
                  required: []
                  properties: {}
                  additionalPropertiesAllowed: true
                  enum: []
                  reference:
                    type: Schema
                    id: ProblemDetails
                    isLocal: true
                    referenceV3: '#/components/schemas/ProblemDetails'
                    referenceV2: '#/definitions/ProblemDetails'
                examples: {}
                encoding: {}
            links: {}
        callbacks: {}
        security: []
        servers: []
    servers: []
    parameters: []
components:
  schemas:
    ProblemDetails:
      type: object
      allOf: []
      oneOf: []
      anyOf: []
      required: []
      properties:
        type:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
          nullable: true
        title:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
          nullable: true
        status:
          type: integer
          format: int32
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
          nullable: true
        detail:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
          nullable: true
        instance:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
          nullable: true
      additionalPropertiesAllowed: true
      additionalProperties:
        allOf: []
        oneOf: []
        anyOf: []
        required: []
        properties: {}
        additionalPropertiesAllowed: true
        enum: []
      enum: []
    AuthenticateDto:
      type: object
      allOf: []
      oneOf: []
      anyOf: []
      required:
      - password
      - username
      properties:
        username:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
        password:
          type: string
          allOf: []
          oneOf: []
          anyOf: []
          required: []
          properties: {}
          additionalPropertiesAllowed: true
          enum: []
      enum: []
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    Bearer:
      description: 'Type into the textbox: Bearer {your JWT token}.'
      name: Authorization
      in: Header
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
securityRequirements: []
tags: []

